#!/bin/bash

#
# name of remote origin repository 
#
ORIGIN='origin';

#
#name of development branch that must be merged before pushing commiting other branches
#
DEVELOP='develop';

#
#count the number of args passed
#
ARGS=$#


function CheckCheckoutError {
	 #set -e will stop script if git throws an error
	 set -e
  	 git checkout "$1"
  	 set +e
}


case "$1" in
new-branch)
   	if [ "$2" != "" ] 
	then
		CheckCheckoutError develop
		git checkout -b "$2"
		git push -u origin "$2"
	else
		echo "please supply a branch name: gitty new-branch 'new-branch-name'"
	fi
;;
retrieve-branch)
   	if [ "$2" != "" ] 
	then
		git fetch
		CheckCheckoutError develop
		git merge origin/develop
		git checkout --track -b $2 origin/$2
	else
		echo "please supply a branch name: gitty retrieve-branch 'remote-branch-name'"
	fi
;;
submit)
  if [ "$2" != "" ]; then
    if [ "$3" != "" ]; then
      CheckCheckoutError "$2"
      git commit -am "$3"
      #git add .
      git checkout develop
      git fetch
      git merge origin/develop
      git checkout "$2"
  	  OUTPUT=$(git merge develop)
      echo $OUTPUT
      if [[ "$OUTPUT" == *CONFLICT* ]]; then
        echo 'CONFLICT DETECTED - Running mergetool:'
      	git mergetool
      	git commit -am "AUTO GENERATED: mergefix for commit: $3"
      fi 
  	  git push origin "$2"
    else
  	  echo "Please supply a commit message: gitty commit-push 'branch-name-to-commit-to' 'commit-message'"
    fi
  else
    echo "Please supply a branch name: gitty commit-push 'branch-name-to-commit-to' 'commit-message'"
  fi
;;
delete)
	if [ "$2" != "" ] 
	then
		set -e
		if [ "$ARGS" == "3" ]; then
			if [[ "$3" == '-force' ]]; then
				CheckCheckoutError $2
				CheckCheckoutError $DEVELOP
				echo "Forcing branch deletion of $2 and $ORIGIN/$2"
				git branch -D $2
				git branch -D -r $ORIGIN/$2
			else
				"echo Unknown option $2. did you mean '-force'?"
				exit
			fi
			
			echo ''
			echo 'Force deletion successfully completed!'
			
		else
			CheckCheckoutError $2
			CheckCheckoutError $DEVELOP
			
			echo "Deleting $2"
			set +e
			OUTPUT=$(git branch -d "$2")
			set -e
			if [[ "$OUTPUT" == "" ]]; then
				echo "'Not Fully Merged with $DEVELOP' error, you may use the '-force' option to force delete."
				exit
			fi
			
			echo "Deleting $2 and $ORIGIN/$2"
			set +e
			OUTPUT=$(git branch -d -r $ORIGIN/$2)
			set -e
			if [[ "$OUTPUT" == "" ]]; then
				echo "'Not Fully Merged with $ORIGIN/$DEVELOP' error, you may use the '-force' option to force delete."
				exit
			fi
			echo ''
			echo 'Deletion successfully completed!'
						
		fi
		set +e
		
	else
		echo "please supply a branch name: gitty 'branch-to-delete-name'"
	fi
;;
*)
  echo " ";
  echo " ";
  echo " ";
  echo "Pass in the following arguments:";
  echo " ";
  echo "new-branch 'branch-name'"
  echo "Will create a new local and remote tracking branch and checkout the new branch"
  echo " ";
  echo "submit 'branch-name' 'commit message'"
  echo "Will commit all changes to branch-name, update develop, merge in develop, and push the result out to remote branch-name"
  echo " ";
  echo "retrieve-branch 'remote-branch-name'"
  echo "Will create, checkout, track and pull a remote branch that does not yet exist locally"
  echo " ";
  echo "delete 'branch-name' [-force]"
  echo "will delete local and remote branch but will check if they are merged with other branches first for safety. Passing the optional -force parameter will force the deletion even if it is not merged in. "
esac

