#!/bin/bash

#
# name of remote origin repository 
#
ORIGIN='origin';

#
#name of development branch that must be merged before pushing commiting other branches
#
DEVELOP='develop';

#
#name of master live branch
#
MASTER='master';


#
#count the number of args passed
#
ARGS=$#


function CheckCheckoutError {
	 #set -e will stop script if git throws an error
	 set -e
  	 git checkout "$1"
  	 set +e
}


function updateBranch {
	CheckCheckoutError $1
	git fetch
	mergeBranch $ORIGIN/$1 
}


function mergeBranch {
	set +e
	OUTPUT=$(git merge $1)
    echo $OUTPUT
    if [[ "$OUTPUT" == *CONFLICT* ]]; then
        echo 'CONFLICT DETECTED - Running mergetool:'
      	git mergetool
      	git commit -am "AUTO GENERATED: mergefix for branch $1"
    fi 
}



case "$1" in
new-branch)
   	if [ "$2" != "" ] 
	then
		updateBranch $MASTER
		git checkout -b "$2"
		git merge $DEVELOP
		git push -u $ORIGIN "$2"
	else
		echo "please supply a branch name: gitty new-branch <new-branch-name>"
	fi
;;
retrieve-branch)
   	if [ "$2" != "" ] 
	then
		updateBranch $MASTER
		git checkout --track -b $2 $ORIGIN/$2
	else
		echo "please supply a branch name: gitty retrieve-branch <remote-branch-name>"
	fi
;;
submit)
  if [ "$2" != "" ]; then
    if [ "$3" != "" ]; then
      CheckCheckoutError "$2"
      set -e
      git add .
      git commit -am "$3"
      set +e
      updateBranch $MASTER
      CheckCheckoutError "$2"
      mergeBranch $MASTER
  	  git push $ORIGIN "$2"
    else
  	  echo "Please supply a commit message: gitty commit-push <branch-name-to-commit-to> 'commit-message'"
    fi
  else
    echo "Please supply a branch name: gitty commit-push <branch-name-to-commit-to> 'commit-message'"
  fi
;;
delete)
	if [ "$2" != "" ]; then
		if [ "$2" == "$DEVELOP" ]; then
			echo " "
			echo "Cannot Delete $DEVELOP branch."
			echo " "
			exit
		fi
		if [ "$2" == "$MASTER" ]; then
			echo " "
			echo "Cannot Delete $MASTER branch."
			echo " "
			exit
		fi
		set -e
		if [ "$ARGS" == "3" ]; then
			if [[ "$3" == '-force' ]]; then
				CheckCheckoutError $2
				CheckCheckoutError $DEVELOP
				git fetch
				echo "Forcing branch deletion of $2 and $ORIGIN/$2"
				git branch -D $2
				git push $ORIGIN :$2
			else
				"echo Unknown option $3. Did you mean '-force'?"
				exit
			fi
			
			echo ''
			echo 'Force deletion successfully completed!'
			echo ''
			
		else
			CheckCheckoutError $2
			CheckCheckoutError $DEVELOP
			git fetch
			echo "Deleting $2"
			set +e
			OUTPUT=$(git branch -d "$2")
			set -e
			if [[ "$OUTPUT" == "" ]]; then
				echo "'Not fully merged with $MASTER' error, you may use the '-force' option to force delete."
				exit
			fi
			
			echo "Deleting $2 and $ORIGIN/$2"
			git push $ORIGIN :$2
			echo ''
			echo 'Deletion successfully completed!'
			echo ''
						
		fi
		
	else
		echo "Please supply a branch name: gitty delete <branch-to-delete-name>"
	fi
;;
merge-stage)
	if [ "$2" != "" ]; then
		if [ "$2" == "$DEVELOP" ]; then
			echo " "
			echo "Cannot merge $DEVELOP into $MASTER"
			echo " "
			exit
		fi
		updateBranch $MASTER
		updateBranch $DEVELOP
	  	mergeBranch $MASTER
		mergeBranch $2
	  	git push $ORIGIN $DEVELOP
	  	CheckCheckoutError $2
	 else
	 	echo "Please pass a branch name as an argument: gitty merge-stage <branch-name>"
	 fi
;;
merge-master)
	if [ "$2" != "" ]; then
		if [ "$2" == "$DEVELOP" ]; then
			echo " "
			echo "Cannot merge $DEVELOP into $MASTER"
			echo " "
			exit
		fi
		updateBranch $MASTER
		updateBranch $2
		mergeBranch $MASTER
		
		CheckCheckoutError $DEVELOP
		mergeBranch $2
		mergeBranch $MASTER
    	
    	CheckCheckoutError $MASTER
	    mergeBranch $2
	    
	    git push $ORIGIN $MASTER
	    
	    CheckCheckoutError $2
	    
	 else
	 	echo "Please pass a branch name as an argument: gitty merge-master <branch-name>"
	 fi
;;
update-branch)
   	if [ "$2" != "" ] 
	then
		updateBranch $2
	else
		echo "please supply a branch name: gitty update-branch <branch-name>"
	fi
;;
sanitize-stage)
	
	#this will work but you will not be able to re-merge files that have already been merged unless
	#they have been changed. not what we want so will have to find a way to revert the branch in
	#a way that will allow the branch to be re-merged in
	
	#updateBranch $MASTER
	#CheckCheckoutError $DEVELOP
	#git reset $MASTER -- . 
	#git checkout
	#git commit -m "sanitized to $MASTER"
	#mergeBranch $MASTER
	#git push $ORIGIN $DEVELOP
;;

*)
  echo " ";
  echo " ";
  echo " ";
  echo "Pass in the following arguments:";
  echo " ";
  echo "new-branch <branch-name>"
  echo "Will create a new local and remote tracking branch and checkout the new branch"
  echo " ";
  echo "submit <branch-name> 'commit message'"
  echo "Will commit all changes to branch-name, update $DEVELOP, merge in $DEVELOP, and push the result out to remote branch-name"
  echo " ";
  echo "retrieve-branch <remote-branch-name>"
  echo "Will create, checkout, track and pull a remote branch that does not yet exist locally"
  echo " ";
  echo "update-branch <branch-name>"
  echo "Will fetch and merge a specific branch that exists both locally and remotely"
  echo " ";
  echo "delete <branch-name> [-force]"
  echo "Will delete local and remote branch but will check if they are merged with other branches first for safety. Passing the optional -force parameter will force the deletion even if it is not merged in. "
  echo " ";
  echo "merge-stage <branch-name>"
  echo "Will update $DEVELOP branch from $ORIGIN, then merge branch-name into $DEVELOP, then push changes to the stage and test sites"
  echo " ";
  echo "merge-master <branch-name>"
  echo "Will make sure branch-name is merged into $DEVELOP first, merge branch-name into $MASTER, then push to the live site"
  echo " ";
  echo " ";
  echo " ";
esac

