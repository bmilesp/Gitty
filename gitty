#!/bin/bash

#
# name of remote origin repository 
#
ORIGIN='origin';

#
#name of development branch that must be merged before pushing commiting other branches
#
DEVELOP='develop';

#
#name of master live branch
#
MASTER='master';


#
#count the number of args passed
#
ARGS=$#


function CheckCheckoutError {
	 #set -e will stop script if git throws an error
	 set -e
  	 git checkout "$1"
  	 set +e
}


case "$1" in
new-branch)
   	if [ "$2" != "" ] 
	then
		CheckCheckoutError $DEVELOP
		git checkout -b "$2"
		git push -u $ORIGIN "$2"
	else
		echo "please supply a branch name: gitty new-branch 'new-branch-name'"
	fi
;;
retrieve-branch)
   	if [ "$2" != "" ] 
	then
		git fetch
		CheckCheckoutError $DEVELOP
		git merge $ORIGIN/$DEVELOP
		git checkout --track -b $2 $ORIGIN/$2
	else
		echo "please supply a branch name: gitty retrieve-branch 'remote-branch-name'"
	fi
;;
submit)
  if [ "$2" != "" ]; then
    if [ "$3" != "" ]; then
      CheckCheckoutError "$2"
      git commit -am "$3"
      #git add .
      git checkout $DEVELOP
      git fetch
      git merge $ORIGIN/$DEVELOP
      git checkout "$2"
  	  OUTPUT=$(git merge $DEVELOP)
      echo $OUTPUT
      if [[ "$OUTPUT" == *CONFLICT* ]]; then
        echo 'CONFLICT DETECTED - Running mergetool:'
      	git mergetool
      	git commit -am "AUTO GENERATED: mergefix for commit: $3"
      fi 
  	  git push origin "$2"
    else
  	  echo "Please supply a commit message: gitty commit-push 'branch-name-to-commit-to' 'commit-message'"
    fi
  else
    echo "Please supply a branch name: gitty commit-push 'branch-name-to-commit-to' 'commit-message'"
  fi
;;
delete)
	if [ "$2" != "" ] 
	then
		set -e
		if [ "$ARGS" == "3" ]; then
			if [[ "$3" == '-force' ]]; then
				CheckCheckoutError $2
				CheckCheckoutError $DEVELOP
				git fetch
				echo "Forcing branch deletion of $2 and $ORIGIN/$2"
				git branch -D $2
				git push $ORIGIN :$2
			else
				"echo Unknown option $3. Did you mean '-force'?"
				exit
			fi
			
			echo ''
			echo 'Force deletion successfully completed!'
			
		else
			CheckCheckoutError $2
			CheckCheckoutError $DEVELOP
			git fetch
			echo "Deleting $2"
			set +e
			OUTPUT=$(git branch -d "$2")
			set -e
			if [[ "$OUTPUT" == "" ]]; then
				echo "'Not fully merged with $DEVELOP' error, you may use the '-force' option to force delete."
				exit
			fi
			
			echo "Deleting $2 and $ORIGIN/$2"
			git push $ORIGIN :$2
			echo ''
			echo 'Deletion successfully completed!'
						
		fi
		
	else
		echo "Please supply a branch name: gitty delete 'branch-to-delete-name'"
	fi
;;
merge-stage)
	if [ "$2" != "" ] 
	then
		CheckCheckoutError $DEVELOP
		git fetch
	  git merge $ORIGIN/$DEVELOP
		OUTPUT=$(git merge $2)
	    echo $OUTPUT
	    if [[ "$OUTPUT" == *CONFLICT* ]]; then
	        echo 'CONFLICT DETECTED - Running mergetool:'
	      	git mergetool
	      	git commit -am "AUTO GENERATED: mergefix for branch $2"
	    fi 
	  	git push $ORIGIN $DEVELOP
	 else
	 	echo "Please pass a branch name as an argument: gitty merge-stage branch-name"
	 fi
;;
merge-master)
	if [ "$2" != "" ] 
	then
		set -e
		CheckCheckoutError $MASTER
		git fetch
    git merge $ORIGIN/$MASTER  
    
    CheckCheckoutError $DEVELOP
    git merge $ORIGIN/$DEVELOP
    set +e
    OUTPUT=$(git merge $MASTER)
    if [[ "$OUTPUT" == *CONFLICT* ]]; then
        echo 'CONFLICT DETECTED WHEN MERGING MASTER INTO $DEVELOP - Running mergetool:'
      	git mergetool
      	git commit -am "AUTO GENERATED: mergefix for branch: $2"
      	echo "$MASTER has a merge conflict with $DEVELOP when $MASTER was merged into $DEVELOP. That may mean that $DEVELOP is not up to date with $MASTER."
		echo " "
		echo "If you're certain that $DEVELOP conflicts are ok, There are two options available to continue:"
		echo "1) If there are changes in $DEVELOP you do not want to merge into $MASTER or $2 yet, run: git checkout $2 & git merge $MASTER. then re-run: gitty merge-master $2"
		echo "2) If you want to sync-up all branches including $DEVELOP, run: gitty merge-stage $2 then re-run: gitty merge-master $2"
		echo " "
		exit
    fi 
	    
	    set -e
	    CheckCheckoutError $2
	    git merge $ORIGIN/$2
	    set +e
	    
	    OUTPUT=$(git merge $MASTER)
	    echo $OUTPUT
	    if [[ "$OUTPUT" == *CONFLICT* ]]; then
	        echo 'CONFLICT DETECTED WHEN MERGING MASTER INTO $2 - Running mergetool:'
	      	git mergetool
	      	git commit -am "AUTO GENERATED: mergefix for branch: $2"
	      	echo "$MASTER has a merge conflict with $2 when $MASTER was merged into $2. That may mean that $DEVELOP is not merged with $MASTER. To verify everything is correct, run: gitty merge-stage $2 and test again before merging master again."
			echo " "
			echo "If you're certain that $2 conflicts are ok, run: gitty merge-master $2 again."
			exit
	    fi 
	    
	    CheckCheckoutError $MASTER
	    set -e
	    git merge $2
	    git push $ORIGIN $MASTER
	    
	 else
	 	echo "Please pass a branch name as an argument: gitty merge-master branch-name"
	 fi
;;


*)
  echo " ";
  echo " ";
  echo " ";
  echo "Pass in the following arguments:";
  echo " ";
  echo "new-branch 'branch-name'"
  echo "Will create a new local and remote tracking branch and checkout the new branch"
  echo " ";
  echo "submit 'branch-name' 'commit message'"
  echo "Will commit all changes to branch-name, update $DEVELOP, merge in $DEVELOP, and push the result out to remote branch-name"
  echo " ";
  echo "retrieve-branch 'remote-branch-name'"
  echo "Will create, checkout, track and pull a remote branch that does not yet exist locally"
  echo " ";
  echo "delete 'branch-name' [-force]"
  echo "Will delete local and remote branch but will check if they are merged with other branches first for safety. Passing the optional -force parameter will force the deletion even if it is not merged in. "
  echo " ";
  echo "merge-stage 'branch-name'"
  echo "Will update $DEVELOP branch from $ORIGIN, then merge branch-name into $DEVELOP, then push changes to the stage and test sites"
  echo " ";
  echo "merge-master 'branch-name'"
  echo "Will make sure branch-name is merged into $DEVELOP first, merge branch-name into $MASTER, then push to the live site"
  echo " ";
  echo " ";
  echo " ";
esac

